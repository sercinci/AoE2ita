{% extends "layout.html.twig" %}

{% block title %}{{tournament.title}} - AoE2ita{% endblock %}
{% block meta %}

{% endblock %}
{% block content %}
    {% include 'menu.html.twig' %}
    <h1>{{tournament.title}}</h1>  
    <pre>{{ tournament | json_encode() }}</pre>
    <br>
    <pre>{{ joined | json_encode() }}</pre>
    <div>
        {{ tournament.description | raw }}
    </div>
    <br>
    {% if api.state == 'pending' %}
        {% if ready and tournament.user_id == user.id %}
            <button onclick="startTournament({{tournament.id}})">Avvia torneo</button>
        {% endif %}
        {% if tournament.random_team %}
          
        {% else %}
            {% for team in tournament.teams %}
                {% if joined or team.members_count == tournament.team_members %}
                    <span>{{ team.title }}</span><br>
                {% else %}
                    <a href="" onclick="joinTeam({{tournament.id}},{{team.id}})"><span>{{ team.title }}</span></a><br>
                {% endif %}
                {% for member in team.members %}
                    <span>- {{ member.username }} - {{ member.mmr_rm }}</span><br>
                {% endfor %}
            {% endfor %}
           
        {% endif %}
    {% endif %}

    {% if api.state == 'underway' %}
        <object type="image/svg+xml" data="{{api.live_image_url}}"></object>
    {% endif %}
    <br>
    <pre>{{ api | json_encode() }}</pre>
    <p>State: pending (preparazione), underway (in corso)</p>
    <br>
    <!-- da nascondere -->
    <object type="image/svg+xml" data="{{api.live_image_url}}"></object><br>
    {% if tournament.user_id == user.id %}
        <button onclick="deleteTournament({{tournament.id}})" class="pure-button">Elimina torneo</button>
    {% endif %}
    {% include 'footer.html.twig' %}
{% endblock %}
{% block javascript %}
    {{ parent() }}
    <script type="text/javascript">
    function joinTeam(tId, teamId) {
      fetch('/tournaments/'+tId+'/team/'+teamId, {
        method: 'PUT',
        //body: new FormData(form),
        credentials: 'same-origin'
      }).then(function(response) {
        console.log(response)
        if (response.ok) {
          location.reload();
        } else {
          throw new Error(response.statusText);
        }
      }).catch(function(error) {
        console.log('request failed', error)
      })
    }

    function startTournament(tId) {
      fetch('/tournaments/'+tId+'/start', {
        method: 'POST',
        //body: new FormData(form),
        credentials: 'same-origin'
      }).then(function(response) {
        console.log(response)
        if (response.ok) {
          location.reload();
        } else {
          throw new Error(response.statusText);
        }
      }).catch(function(error) {
        console.log('request failed', error)
      })
    }

    function deleteTournament(tId) {
      fetch('/tournaments/'+tId+'/delete', {
        method: 'DELETE',
        //body: new FormData(form),
        credentials: 'same-origin'
      }).then(function(response) {
        //console.log(response)
        if (response.ok) {
          location.href = '/tournaments';
        } else {
          throw new Error(response.statusText);
        }
      }).catch(function(error) {
        console.log('request failed', error)
      })
    }
    </script>
{% endblock %}